- name: Install curl and gpg
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
    state: present

- name: Turn off swap
  command: swapoff -a
  ignore_errors: yes

- name: Remove swap
  command: sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  ignore_errors: yes

- name: Add docker apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add docker repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    state: present

- name: Add kubernetes apt key
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
    state: present

- name: Add kubernetes repository
  apt_repository:
    repo: deb https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
    state: present

- name: Install containerd.io
  apt:
    name: containerd.io
    state: present

- name: Copy containerd config
  copy:
    dest: /etc/containerd/config.toml
    src: containerd-config.toml

- name: Restart containerd
  service:
    name: containerd
    state: restarted

- name: Install kubelet kubeadm kubectl
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present

- name: Hold package versions using apt_mark
  shell: "apt-mark hold {{ item }}"
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Enable ip forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
    reload: yes

- name: Install conntrack iptables
  apt:
    name:
      - conntrack
      - iptables
    state: present

- name: Determine node type based on hostname
  set_fact:
    node_type: "{{ 'controller' if 'controller' in ansible_hostname else 'worker' }}"

- name: Initialize Kubernetes cluster on controller node
  command: kubeadm init --pod-network-cidr=10.244.0.0/16
  when: node_type == 'controller'

- name: Create .kube directory
  command: mkdir -p /root/.kube
  when: node_type == 'controller'

- name: Copy kube config to user home directory
  command: cp /etc/kubernetes/admin.conf /root/.kube/config
  when: node_type == 'controller'

- name: Install Cilium CLI
  command: curl -L --remote-name https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz

- name: Extract Cilium CLI
  command: tar xzvf cilium-linux-amd64.tar.gz

- name: Move Cilium CLI to /usr/local/bin
  command: mv cilium /usr/local/bin

- name: Install Cilium network plugin
  command: cilium install
  when: node_type == 'controller'

- name: Copy join file to worker nodes
  copy:
    dest: /root/kubeadm_join_command
    src: "{{ stage }}-join"
  when: node_type != 'controller'

- name: Run kubeadm join command on worker nodes
  command: bash /root/kubeadm_join_command
  when: node_type != 'controller'